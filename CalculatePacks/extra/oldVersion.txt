package main

import (
	"fmt"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)

// Represents the response structure for the /order endpoint
type OrderResponse struct {
	Orders []Order `json:"Orders,omitempty"`
	Order  *Order  `json:"Order,omitempty"`
}

// Represents an order with its items and correct packs
type Order struct {
	Items        int         `json:"Items ordered"`
	CorrectPacks map[int]int `json:"Correct number of packs"`
	Error        string      `json:"error,omitempty"`
}

// Calculates the correct number of packs needed to fulfill an order
func correctCalculatePacks(items int) map[int]int {
	packSizes := []int{5000, 2000, 1000, 500, 250}
	correctPacks := make(map[int]int)

	for _, packSize := range packSizes {

		// Calculate the number of packs for the current pack size
		packs := items / packSize

		if packs > 0 {
			if packSize == 250 && items > 250 && items < 500 {
				// Special case for pack size 250 when items are between 250 and 500
				correctPacks[500] = 1
				items -= 500
			} else {
				correctPacks[packSize] = packs // Add the calculated packs for the current pack size to the correct packs
				items -= packs * packSize      // Reduce the remaining items by the total value of the calculated packs
			}
		}
	}

	if items > 0 {
		correctPacks[250] = 1 // If there are any remaining items, add a pack of size 250 to the correct packs
	}

	return correctPacks
}

// Validates user input for the number of items and checks for invalid inputs
func getInputAndValidate(c *gin.Context) ([]int, error) {
	// Retrieve the items from the request form
	itemsStr := c.PostFormArray("items")

	if len(itemsStr) == 0 {
		return nil, fmt.Errorf("No items provided. Please provide a valid list of items") // Return an error message
	}

	// Validate each item in the input
	items := make([]int, len(itemsStr)) // Create a slice to store the validated items
	for i, itemStr := range itemsStr {
		item, err := strconv.Atoi(itemStr) // Convert the item string to an integer
		if err != nil {
			return nil, fmt.Errorf("Invalid input. Please provide a valid number of items") // Return an error message for invalid input
		}

		// Check for specific conditions related to the input item
		if item == 0 {
			return nil, fmt.Errorf("Invalid input. You cannot order 0 items. Please provide a valid number of items")
		}

		if item < 0 {
			return nil, fmt.Errorf("Invalid input. You cannot order negative items. Please provide a valid number of items")
		}

		items[i] = item // Store the validated item in the items slice
	}

	return items, nil // Return the validated items slice and nil to indicate no errors
}

func main() {
	router := gin.Default()

	// Define the "/order" endpoint
	router.POST("/order", func(c *gin.Context) {
		// Get and validate the input items from the request
		items, err := getInputAndValidate(c)
		if err != nil {
			// If there's an error in the input, return a JSON response with the error message and a 400 status code
			c.IndentedJSON(http.StatusBadRequest, gin.H{"Error message": err.Error()})
			return
		}

		if len(items) == 1 {
			// If there's only one item in the input, calculate the correct packs for that item
			item := items[0]
			correctPacks := correctCalculatePacks(item)
			order := Order{
				Items:        item,
				CorrectPacks: correctPacks,
			}

			response := OrderResponse{
				Order: &order,
			}

			// Return a JSON response with the single order and a 200 status code
			c.IndentedJSON(http.StatusOK, response)
		} else {
			// If there are multiple items in the input, calculate the correct packs for each item
			orders := make([]Order, len(items))
			for i, item := range items {
				correctPacks := correctCalculatePacks(item)
				order := Order{
					Items:        item,
					CorrectPacks: correctPacks,
				}
				orders[i] = order
			}

			response := OrderResponse{
				Orders: orders,
			}

			// Return a JSON response with the multiple orders and a 200 status code
			c.IndentedJSON(http.StatusOK, response)
		}
	})

	// Start the server and listen on port 8080
	router.Run(":8080")
}
